import api from "../api"; // adjust path if needed

const submitTransaction = async () => {
  if (!validateForm()) return;

  try {
    // build payload to match your Transactions entity
    const transactionPayload = {
      currency: instructionDetails.paymentCurrency,
      debitAccount: instructionDetails.debitAccount,
      valueDate: instructionDetails.valueDate,
      // if your entity also has these:
      // accountNo: instructionDetails.accountNo,
      // companyName: instructionDetails.companyName,
      // batchId: instructionDetails.batchId,

      // take first row (or map all rows if multiple allowed)
      paymentMethod: rows[0].paymentMethod,
      payeeDetails: rows[0].payeeDetails,
      payeeNature: rows[0].payeeNature,
      bankDetails: rows[0].bankDetails,
      yourReference: rows[0].yourReference,
      paymentReference: rows[0].paymentReference,
      amount: rows[0].amount,
      notesToPayee: rows[0].notesToPayee,
      additionalNotes: rows[0].additionalNotes,
      status: "PENDING"
    };

    const response = await api.post("/transactions", transactionPayload);

    alert(`✅ Transaction submitted successfully! ID: ${response.data.transactionId}`);

    // reset form
    setInstructionDetails({
      paymentCurrency: "",
      debitAccount: "",
      valueDate: new Date().toISOString().split("T")[0],
    });

    setRows([{
      paymentMethod: "",
      payeeDetails: "",
      payeeNature: "",
      bankDetails: "",
      yourReference: "",
      paymentReference: "",
      amount: "",
      notesToPayee: "",
      additionalNotes: ""
    }]);

    setCurrentPage(1);
    setErrors({ instruction: {}, rows: [] });

  } catch (error) {
    console.error("Transaction submission failed:", error);
    alert(`❌ Failed to submit transaction: ${error.response?.data?.message || error.message}`);
  }
};
