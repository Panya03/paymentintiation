package com.scb.Payment.Initiation.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import org.springframework.security.core.userdetails.User;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "batches")
public class Batch {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "batch_id")
    private Long batchId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "created_by",nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer","handler"})
    private Users createdBy;

    @Column(name = "source_acc_id")
    private String sourceAccId;

    @Column(name = "batch_name")
    private String batchName;

    @Column(name = "tot_amt")
    private Double totAmt;

    @Column(name = "currency")
    private String currency;

    @Column(name = "status")
    private String status;

    @Column(name = "is_draft")
    private Boolean isDraft;


    @Column(name = "tot_debit_amt")
    private Double totDebitAmt;

    @Column(name = "comments")
    private String comments;

    @Column(name = "num_of_payments")
    private Integer numOfPayments;

    @Column(name = "your_ref")
    private String yourRef;

    @Column(name = "payment_ref")
    private String paymentRef;

    // Constructors
    public Batch() {}

    public Batch(Long batchId, Users createdBy, String sourceAccId, String batchName, Double totAmt, String currency, String status, Boolean isDraft, Double totDebitAmt, String comments, Integer numOfPayments, String yourRef, String paymentRef) {
        this.batchId = batchId;
        this.createdBy = createdBy;
        this.sourceAccId = sourceAccId;
        this.batchName = batchName;
        this.totAmt = totAmt;
        this.currency = currency;
        this.status = status;
        this.isDraft = isDraft;
        this.totDebitAmt = totDebitAmt;
        this.comments = comments;
        this.numOfPayments = numOfPayments;
        this.yourRef = yourRef;
        this.paymentRef = paymentRef;
    }

    public Long getBatchId() {
        return batchId;
    }

    public void setBatchId(Long batchId) {
        this.batchId = batchId;
    }

    public Users getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(Users createdBy) {
        this.createdBy = createdBy;
    }

    public String getSourceAccId() {
        return sourceAccId;
    }

    public void setSourceAccId(String sourceAccId) {
        this.sourceAccId = sourceAccId;
    }

    public String getBatchName() {
        return batchName;
    }

    public void setBatchName(String batchName) {
        this.batchName = batchName;
    }

    public Double getTotAmt() {
        return totAmt;
    }

    public void setTotAmt(Double totAmt) {
        this.totAmt = totAmt;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Boolean getDraft() {
        return isDraft;
    }

    public void setDraft(Boolean draft) {
        isDraft = draft;
    }

    public Double getTotDebitAmt() {
        return totDebitAmt;
    }

    public void setTotDebitAmt(Double totDebitAmt) {
        this.totDebitAmt = totDebitAmt;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public Integer getNumOfPayments() {
        return numOfPayments;
    }

    public void setNumOfPayments(Integer numOfPayments) {
        this.numOfPayments = numOfPayments;
    }

    public String getYourRef() {
        return yourRef;
    }

    public void setYourRef(String yourRef) {
        this.yourRef = yourRef;
    }

    public String getPaymentRef() {
        return paymentRef;
    }

    public void setPaymentRef(String paymentRef) {
        this.paymentRef = paymentRef;
    }
}

 
package com.scb.Payment.Initiation.controller;

import com.scb.Payment.Initiation.entity.Batch;
import com.scb.Payment.Initiation.entity.Transactions;
import com.scb.Payment.Initiation.entity.Users;
import com.scb.Payment.Initiation.repository.BatchRepository;
import com.scb.Payment.Initiation.repository.UserRepository;
import com.scb.Payment.Initiation.service.BatchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/batches")
//@CrossOrigin(origins = "http://localhost:3000/")
public class BatchController {

    @Autowired
    private BatchService batchService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BatchRepository batchRepository;

    @PostMapping("/create")
    public Batch createBatch(@RequestBody Batch batch) {
        Users creator = userRepository.findById(batch.getCreatedBy().getId()).orElseThrow(()-> new RuntimeException("USer not found"));
        batch.setCreatedBy(creator);
        return batchRepository.save(batch);
    }

    @GetMapping
    public ResponseEntity<List<Batch>> getAllBatches() {
        try {
            List<Batch> batches = batchService.getAllBatches();
            if (batches.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(batches, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<Batch> getBatchById(@PathVariable("id") Long batchId) {
        try {
            Optional<Batch> batch = batchService.getBatchById(batchId);
            if (batch.isPresent()) {
                return new ResponseEntity<>(batch.get(), HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

//    @GetMapping("/created-by/{createdBy}")
//    public ResponseEntity<List<Batch>> getBatchesByCreatedBy(@PathVariable("createdBy") Integer createdBy) {
//        try {
//            List<Batch> batches = batchService.getBatchesByCreatedBy(createdBy);
//            return new ResponseEntity<>(batches, HttpStatus.OK);
//        } catch (Exception e) {
//            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
//        }
//    }

    @GetMapping("/status/{status}")
    public ResponseEntity<List<Batch>> getBatchesByStatus(@PathVariable("status") String status) {
        try {
            List<Batch> batches = batchService.getBatchesByStatus(status);
            return new ResponseEntity<>(batches, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/drafts")
    public ResponseEntity<List<Batch>> getDraftBatches() {
        try {
            List<Batch> batches = batchService.getDraftBatches();
            return new ResponseEntity<>(batches, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/search")
    public ResponseEntity<List<Batch>> searchBatchesByName(@RequestParam("name") String batchName) {
        try {
            List<Batch> batches = batchService.getBatchesByName(batchName);
            return new ResponseEntity<>(batches, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<Batch> updateBatch(@PathVariable("id") Long batchId, @RequestBody Batch batchDetails) {
        try {
            Batch updatedBatch = batchService.updateBatch(batchId, batchDetails);
            if (updatedBatch != null) {
                return new ResponseEntity<>(updatedBatch, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteBatch(@PathVariable("id") Long batchId) {
        try {
            boolean deleted = batchService.deleteBatch(batchId);
            if (deleted) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

//   // @PostMapping("/cft")
//    // public ResponseEntity<List<Batch>> createBatchesFromTransactions(
//          //  @RequestBody List<Transactions> transactions,
//            @RequestParam Integer createdBy,
//            @RequestParam String sourceAccId) {
//        try {
//            List<Batch> batches = batchService.createBatchesGroupedByDateAndCurrency(
//                    transactions,
//                    createdBy,
//                    sourceAccId
//            );
//            return new ResponseEntity<>(batches, HttpStatus.CREATED);
//        } catch (Exception e) {
//            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
//        }
//    }
}
 
