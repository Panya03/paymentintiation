import React, { useEffect, useState } from 'react';
import { Save, Send, FileText} from 'lucide-react';
import InstructionDetails from './InstructionDetails';
import PaymentDetailsTable from './PaymentDetailsTable';
import DraftManagement from './DraftManagement';
import { saveDraftToStorage } from '../utils/draftUtils';
import "bootstrap/dist/css/bootstrap.min.css"

// page component
const PaymentForm = () => {
  const ROWS_PER_PAGE = 10;
  
  // instruction details - matching entity fields
  const [instructionDetails, setInstructionDetails] = useState({
    currency: '',
    debitAccount: '',
    valueDate: new Date().toISOString().split('T')[0],
    companyName: '',
    batchId: ''
  });
  
  // payment rows - matching entity fields exactly
  const [rows, setRows] = useState([{
    accountNo: '',
    referenceNo: '',
    beneficiary: '',
    amount: '',
    paymentMethod: '',
    payeeName: '',
    payeeBank: '',
    payeeBankBranch: '',
    payeeBankAddress: ''
  }]);
  
  // Page state
  const [currentPage, setCurrentPage] = useState(1);
  
  // State for errors
  const [errors, setErrors] = useState({
    instruction: {},
    rows: []
  });
  
  const [showDrafts, setShowDrafts] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // helper to load a draft back
  const handleEditDraft = (draft) => {
    if (!draft?.data) return;
    
    setShowDrafts(false);
    setInstructionDetails(draft.data.instructionDetails || instructionDetails);
    setRows(draft.data.rows?.length ? draft.data.rows : rows);
  };

  //page calculations
  const totalPages = Math.max(1, Math.ceil(rows.length / ROWS_PER_PAGE));
  const startIndex = (currentPage - 1) * ROWS_PER_PAGE;
  const endIndex = startIndex + ROWS_PER_PAGE;
  const currentRows = rows.slice(startIndex, endIndex);
  const canAddMore = rows.length < 100;

  // Update instruction details
  const updateInstructionDetails = (field, value) => {
    setInstructionDetails(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when user updates field
    if (errors.instruction[field]) {
      setErrors(prev => ({
        ...prev,
        instruction: {
          ...prev.instruction,
          [field]: ''
        }
      }));
    }
  };

  // Update a row
  const updateRow = (displayIndex, field, value) => {
    const actualIndex = startIndex + displayIndex;
    const newRows = [...rows];
    newRows[actualIndex] = {
      ...newRows[actualIndex],
      [field]: value
    };
    setRows(newRows);
    
    // Clear error once field updates
    if (errors.rows[actualIndex] && errors.rows[actualIndex][field]) {
      const newErrors = [...errors.rows];
      newErrors[actualIndex] = {
        ...newErrors[actualIndex],
        [field]: ''
      };
      setErrors(prev => ({
        ...prev,
        rows: newErrors
      }));
    }
  };

  // Add new row
  const addRow = () => {
    if (canAddMore) {
      const newRow = {
        accountNo: '',
        referenceNo: '',
        beneficiary: '',
        amount: '',
        paymentMethod: '',
        payeeName: '',
        payeeBank: '',
        payeeBankBranch: '',
        payeeBankAddress: ''
      };
      setRows([...rows, newRow]);
      
      // Navigate to the page with the new row
      const newTotalPages = Math.ceil((rows.length + 1) / ROWS_PER_PAGE);
      setCurrentPage(newTotalPages);
    }
  };

  // Remove row
  const removeRow = (displayIndex) => {
    if (rows.length > 1) {
      const actualIndex = startIndex + displayIndex;
      const newRows = rows.filter((_, index) => index !== actualIndex);
      setRows(newRows);
      
      const newErrorRows = errors.rows.filter((_, index) => index !== actualIndex);
      setErrors(prev => ({
        ...prev,
        rows: newErrorRows
      }));
      
      // Adjust current page if necessary
      const newTotalPages = Math.max(1, Math.ceil(newRows.length / ROWS_PER_PAGE));
      if (currentPage > newTotalPages) {
        setCurrentPage(newTotalPages);
      }
    }
  };

  // Handle page change
  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
  };

  // Validate form
  const validateForm = () => {
    const newErrors = {
      instruction: {},
      rows: []
    };

    // Validate instruction details
    if (!instructionDetails.currency) {
      newErrors.instruction.currency = 'Currency is required';
    }
    if (!instructionDetails.debitAccount) {
      newErrors.instruction.debitAccount = 'Debit account is required';
    }
    if (!instructionDetails.valueDate) {
      newErrors.instruction.valueDate = 'Value date is required';
    } else if (new Date(instructionDetails.valueDate) < new Date()) {
      newErrors.instruction.valueDate = 'Value date must be today or later';
    }
    if (!instructionDetails.companyName) {
      newErrors.instruction.companyName = 'Company name is required';
    }
    if (!instructionDetails.batchId) {
      newErrors.instruction.batchId = 'Batch ID is required';
    }

    // Validate rows
    rows.forEach((row, index) => {
      const rowErrors = {};
      if (!row.accountNo) rowErrors.accountNo = 'Account number is required';
      if (!row.referenceNo) rowErrors.referenceNo = 'Reference number is required';
      if (!row.beneficiary) rowErrors.beneficiary = 'Beneficiary is required';
      if (!row.paymentMethod) rowErrors.paymentMethod = 'Payment method is required';
      if (!row.payeeName) rowErrors.payeeName = 'Payee name is required';
      if (!row.payeeBank) rowErrors.payeeBank = 'Payee bank is required';
      if (!row.payeeBankBranch) rowErrors.payeeBankBranch = 'Payee bank branch is required';
      if (!row.payeeBankAddress) rowErrors.payeeBankAddress = 'Payee bank address is required';
      if (!row.amount) {
        rowErrors.amount = 'Amount is required';
      } else if (parseFloat(row.amount) <= 0) {
        rowErrors.amount = 'Amount must be positive';
      }
      newErrors.rows[index] = rowErrors;
    });

    setErrors(newErrors);
    return Object.keys(newErrors.instruction).length === 0 && 
           newErrors.rows.every(rowError => Object.keys(rowError).length === 0);
  };

  // Save draft
  const handleDraft = () => {
    if (!validateForm()) {
      alert('Please fix all errors before saving draft');
      return;
    }

    const draft = {
      id: Date.now().toString(),
      name: instructionDetails.companyName || "Untitled Draft",
      debitAccount: instructionDetails.debitAccount,
      status: "draft",
      currency: instructionDetails.currency,
      totalAmount: rows.reduce((sum, row) => sum + Number(row.amount || 0), 0),
      paymentCount: rows.length,
      createdDate: new Date().toLocaleDateString(),
      lastModified: new Date().toLocaleDateString(),
      data: {
        instructionDetails,
        rows,
      },
    };

    saveDraftToStorage(draft);
    alert('Draft saved successfully!');
    setShowDrafts(true);
  };

  // Submit transaction - Creates individual transactions for each row
  const submitTransaction = async () => {
    if (!validateForm()) {
      alert('Please fix all errors before submitting');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const transactions = rows.map(row => ({
        debitAccount: instructionDetails.debitAccount,
        accountNo: row.accountNo,
        currency: instructionDetails.currency,
        referenceNo: parseInt(row.referenceNo),
        beneficiary: row.beneficiary,
        companyName: instructionDetails.companyName,
        valueDate: instructionDetails.valueDate,
        amount: row.amount,
        status: 'PENDING',
        paymentMethod: row.paymentMethod,
        payeeName: row.payeeName,
        payeeBank: row.payeeBank,
        payeeBankBranch: row.payeeBankBranch,
        payeeBankAddress: row.payeeBankAddress,
        batchId: parseInt(instructionDetails.batchId)
      }));

      // Submit each transaction
      const results = [];
      for (const transaction of transactions) {
        const response = await fetch('http://localhost:8080/api/transactions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(transaction)
        });

        if (response.ok) {
          const result = await response.json();
          results.push(result);
        } else {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || 'Failed to submit transaction');
        }
      }

      alert(`${results.length} transaction(s) submitted successfully!`);
      
      // Reset form
      setInstructionDetails({
        currency: '',
        debitAccount: '',
        valueDate: new Date().toISOString().split('T')[0],
        companyName: '',
        batchId: ''
      });
      setRows([{
        accountNo: '',
        referenceNo: '',
        beneficiary: '',
        amount: '',
        paymentMethod: '',
        payeeName: '',
        payeeBank: '',
        payeeBankBranch: '',
        payeeBankAddress: ''
      }]);
      setCurrentPage(1);

    } catch (error) {
      console.error('Error submitting transaction:', error);
      alert(`Failed to submit transaction: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Calculate current row errors for display
  const currentRowErrors = currentRows.map((_, displayIndex) => {
    const actualIndex = startIndex + displayIndex;
    return errors.rows[actualIndex] || {};
  });

  return (
    <div className="min-vh-100 bg-light">
      {showDrafts ? (
        <DraftManagement
          onEditDraft={handleEditDraft}
          onBackToCreate={() => setShowDrafts(false)}
        />
      ) : (
        <div className="container-fluid px-4">
          <div className="mb-4 mt-3">
            <div className="d-flex justify-content-between align-items-center">
              <h1 className="h2 fw-bold text-dark mb-0">
                Create Payment Instructions
              </h1>
              <button
                onClick={() => setShowDrafts(true)}
                className="btn btn-outline-primary d-flex align-items-center"
              >
                <FileText className="me-2" size={18} />
                View Drafts
              </button>
            </div>
            <p className="text-muted mt-2 mb-0">
              Set up your payment instructions with detailed beneficiary information
            </p>
          </div>

          <div className="mb-4">
            <InstructionDetails
              instructionDetails={instructionDetails}
              updateInstructionDetails={updateInstructionDetails}
              errors={errors.instruction}
            />
          </div>

          <div className="mb-4">
            <PaymentDetailsTable
              rows={currentRows}
              updateRow={updateRow}
              addRow={addRow}
              removeRow={removeRow}
              errors={currentRowErrors}
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
              canAddMore={canAddMore}
            />
          </div>

          <div className="d-flex justify-content-end gap-3 mt-4">
            <button
              onClick={handleDraft}
              className="btn btn-secondary d-inline-flex align-items-center px-4 py-2"
              disabled={isSubmitting}
            >
              <Save className="me-2" style={{ width: '20px', height: '20px' }} />
              Save Draft
            </button>
            <button
              onClick={submitTransaction}
              className="btn btn-success d-inline-flex align-items-center px-4 py-2"
              disabled={isSubmitting}
            >
              <Send className="me-2" style={{ width: '20px', height: '20px' }} />
              {isSubmitting ? 'Submitting...' : 'Submit Transaction'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PaymentForm;
