import React from 'react';
import ValidationMessage from './ValidationMessage';

// Instruction Details Component
const InstructionDetails = ({ instructionDetails, updateInstructionDetails, errors }) => {
  const currencies = ['', 'USD', 'EUR', 'GBP', 'SGD', 'HKD', 'JPY'];
  const debitAccounts = ['', '1234567890 - USD Operating Account', '0987654321 - EUR Business Account', '1122334455 - GBP Current Account'];

  return (
    <div className="card shadow-sm mb-4">
      <div className="card-body">
        <h3 className="h5 fw-semibold text-dark mb-4">Instruction Details</h3>
        <div className="row g-3">
          <div className="col-md-4">
            <label className="form-label fw-medium text-dark mb-1">
              Payment Currency *
            </label>
            <select
              className={`form-select ${errors.paymentCurrency ? 'is-invalid' : ''}`}
              value={instructionDetails.paymentCurrency}
              onChange={(e) => updateInstructionDetails('paymentCurrency', e.target.value)}
            >
              {currencies.map((currency, index) => (
                <option key={index} value={currency}>
                  {currency || 'Select Currency'}
                </option>
              ))}
            </select>
            <ValidationMessage message={errors.paymentCurrency} />
          </div>

          <div className="col-md-4">
            <label className="form-label fw-medium text-dark mb-1">
              Debit Account *
            </label>
            <select
              className={`form-select ${errors.debitAccount ? 'is-invalid' : ''}`}
              value={instructionDetails.debitAccount}
              onChange={(e) => updateInstructionDetails('debitAccount', e.target.value)}
            >
              {debitAccounts.map((account, index) => (
                <option key={index} value={account}>
                  {account || 'Choose a debit account'}
                </option>
              ))}
            </select>
            <ValidationMessage message={errors.debitAccount} />
          </div>

          <div className="col-md-4">
            <label className="form-label fw-medium text-dark mb-1">
              Value Date *
            </label>
            <input
              type="date"
              className={`form-control ${errors.valueDate ? 'is-invalid' : ''}`}
              value={instructionDetails.valueDate}
              onChange={(e) => updateInstructionDetails('valueDate', e.target.value)}
              min={new Date().toISOString().split('T')[0]}
            />
            <ValidationMessage message={errors.valueDate} />
          </div>

          <div className="col-md-6">
            <label className="form-label fw-medium text-dark mb-1">
              Account Number
            </label>
            <input
              type="text"
              className={`form-control ${errors.accountNo ? 'is-invalid' : ''}`}
              value={instructionDetails.accountNo || ''}
              onChange={(e) => updateInstructionDetails('accountNo', e.target.value)}
              placeholder="Enter account number"
            />
            <ValidationMessage message={errors.accountNo} />
          </div>

          <div className="col-md-6">
            <label className="form-label fw-medium text-dark mb-1">
              Company Name
            </label>
            <input
              type="text"
              className={`form-control ${errors.companyName ? 'is-invalid' : ''}`}
              value={instructionDetails.companyName || ''}
              onChange={(e) => updateInstructionDetails('companyName', e.target.value)}
              placeholder="Enter company name"
            />
            <ValidationMessage message={errors.companyName} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default InstructionDetails;



const [instructionDetails, setInstructionDetails] = useState({
  paymentCurrency: '',
  debitAccount: '',
  valueDate: new Date().toISOString().split('T')[0],
  accountNo: '',
  companyName: ''
});

// Also update the form reset in submitTransaction function
const submitTransaction = async() => {
  if (validateForm()) try {
    // build payload to match your Transactions entity
    const transactionPayload = {
      currency: instructionDetails.paymentCurrency,
      debitAccount: instructionDetails.debitAccount,
      valueDate: instructionDetails.valueDate,
      
      accountNo: instructionDetails.accountNo,
      companyName: instructionDetails.companyName,

      paymentMethod: rows[0].paymentMethod,
      payeeDetails: rows[0].payeeDetails,
      payeeNature: rows[0].payeeNature,
      bankDetails: rows[0].bankDetails,
      yourReference: rows[0].yourReference,
      paymentReference: rows[0].paymentReference,
      amount: rows[0].amount,
      notesToPayee: rows[0].notesToPayee,
      additionalNotes: rows[0].additionalNotes,
      status: "PENDING"
    };

    const response = await API.post("/api/transactions", transactionPayload);

    alert(`✅ Transaction submitted successfully! ID: ${response.data.transactionId}`);

    // reset form
    setInstructionDetails({
      paymentCurrency: "",
      debitAccount: "",
      valueDate: new Date().toISOString().split("T")[0],
      accountNo: "",
      companyName: ""
    });

    setRows([{
      paymentMethod: "",
      payeeDetails: "",
      payeeNature: "",
      bankDetails: "",
      yourReference: "",
      paymentReference: "",
      amount: "",
      notesToPayee: "",
      additionalNotes: ""
    }]);

    setCurrentPage(1);
    setErrors({ instruction: {}, rows: [] });

  } catch (error) {
    console.error("Transaction submission failed:", error);
    alert(`❌ Failed to submit transaction: ${error.response?.data?.message || error.message}`);
  }
};
