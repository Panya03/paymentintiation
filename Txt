import api from "../api"; // adjust path if needed

const submitTransaction = async () => {
  if (!validateForm()) return;

  try {
    // build payload to match your Transactions entity
    const transactionPayload = {
      currency: instructionDetails.paymentCurrency,
      debitAccount: instructionDetails.debitAccount,
      valueDate: instructionDetails.valueDate,
      // if your entity also has these:
      // accountNo: instructionDetails.accountNo,
      // companyName: instructionDetails.companyName,
      // batchId: instructionDetails.batchId,

      // take first row (or map all rows if multiple allowed)
      paymentMethod: rows[0].paymentMethod,
      payeeDetails: rows[0].payeeDetails,
      payeeNature: rows[0].payeeNature,
      bankDetails: rows[0].bankDetails,
      yourReference: rows[0].yourReference,
      paymentReference: rows[0].paymentReference,
      amount: rows[0].amount,
      notesToPayee: rows[0].notesToPayee,
      additionalNotes: rows[0].additionalNotes,
      status: "PENDING"
    };

    const response = await api.post("/transactions", transactionPayload);

    alert(`✅ Transaction submitted successfully! ID: ${response.data.transactionId}`);

    // reset form
    setInstructionDetails({
      paymentCurrency: "",
      debitAccount: "",
      valueDate: new Date().toISOString().split("T")[0],
    });

    setRows([{
      paymentMethod: "",
      payeeDetails: "",
      payeeNature: "",
      bankDetails: "",
      yourReference: "",
      paymentReference: "",
      amount: "",
      notesToPayee: "",
      additionalNotes: ""
    }]);

    setCurrentPage(1);
    setErrors({ instruction: {}, rows: [] });

  } catch (error) {
    console.error("Transaction submission failed:", error);
    alert(`❌ Failed to submit transaction: ${error.response?.data?.message || error.message}`);
  }
};


import React from 'react';
import { Plus } from 'lucide-react';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Trash2 } from 'lucide-react';
import DownloadTemplateButton from './DownloadTemplateButton';

// PaymentRow Component - handles individual row rendering
const PaymentRow = ({ row, rowIndex, updateRow, removeRow, errors, isOdd }) => {
  const handleInputChange = (field, value) => {
    updateRow(rowIndex, field, value);
  };

  return (
    <tr className={isOdd ? 'bg-light' : ''}>
      {/* Account No */}
      <td className="px-3 py-3">
        <input
          type="text"
          className={`form-control ${errors.accountNo ? 'is-invalid' : ''}`}
          value={row.accountNo || ''}
          onChange={(e) => handleInputChange('accountNo', e.target.value)}
          placeholder="Account number"
        />
        {errors.accountNo && (
          <div className="invalid-feedback">{errors.accountNo}</div>
        )}
      </td>

      {/* Reference No */}
      <td className="px-3 py-3">
        <input
          type="number"
          className={`form-control ${errors.referenceNo ? 'is-invalid' : ''}`}
          value={row.referenceNo || ''}
          onChange={(e) => handleInputChange('referenceNo', e.target.value)}
          placeholder="Reference number"
        />
        {errors.referenceNo && (
          <div className="invalid-feedback">{errors.referenceNo}</div>
        )}
      </td>

      {/* Beneficiary */}
      <td className="px-3 py-3">
        <input
          type="text"
          className={`form-control ${errors.beneficiary ? 'is-invalid' : ''}`}
          value={row.beneficiary || ''}
          onChange={(e) => handleInputChange('beneficiary', e.target.value)}
          placeholder="Beneficiary name"
        />
        {errors.beneficiary && (
          <div className="invalid-feedback">{errors.beneficiary}</div>
        )}
      </td>

      {/* Amount */}
      <td className="px-3 py-3">
        <input
          type="number"
          step="0.01"
          className={`form-control ${errors.amount ? 'is-invalid' : ''}`}
          value={row.amount || ''}
          onChange={(e) => handleInputChange('amount', e.target.value)}
          placeholder="0.00"
        />
        {errors.amount && (
          <div className="invalid-feedback">{errors.amount}</div>
        )}
      </td>

      {/* Payment Method */}
      <td className="px-3 py-3">
        <select
          className={`form-select ${errors.paymentMethod ? 'is-invalid' : ''}`}
          value={row.paymentMethod || ''}
          onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
        >
          <option value="">Select method</option>
          <option value="WIRE">Wire Transfer</option>
          <option value="ACH">ACH</option>
          <option value="CHECK">Check</option>
          <option value="RTGS">RTGS</option>
          <option value="NEFT">NEFT</option>
        </select>
        {errors.paymentMethod && (
          <div className="invalid-feedback">{errors.paymentMethod}</div>
        )}
      </td>

      {/* Payee Name */}
      <td className="px-3 py-3">
        <input
          type="text"
          className={`form-control ${errors.payeeName ? 'is-invalid' : ''}`}
          value={row.payeeName || ''}
          onChange={(e) => handleInputChange('payeeName', e.target.value)}
          placeholder="Payee name"
        />
        {errors.payeeName && (
          <div className="invalid-feedback">{errors.payeeName}</div>
        )}
      </td>

      {/* Payee Bank */}
      <td className="px-3 py-3">
        <input
          type="text"
          className={`form-control ${errors.payeeBank ? 'is-invalid' : ''}`}
          value={row.payeeBank || ''}
          onChange={(e) => handleInputChange('payeeBank', e.target.value)}
          placeholder="Bank name"
        />
        {errors.payeeBank && (
          <div className="invalid-feedback">{errors.payeeBank}</div>
        )}
      </td>

      {/* Bank Branch */}
      <td className="px-3 py-3">
        <input
          type="text"
          className={`form-control ${errors.payeeBankBranch ? 'is-invalid' : ''}`}
          value={row.payeeBankBranch || ''}
          onChange={(e) => handleInputChange('payeeBankBranch', e.target.value)}
          placeholder="Branch name"
        />
        {errors.payeeBankBranch && (
          <div className="invalid-feedback">{errors.payeeBankBranch}</div>
        )}
      </td>

      {/* Bank Address */}
      <td className="px-3 py-3">
        <textarea
          className={`form-control ${errors.payeeBankAddress ? 'is-invalid' : ''}`}
          value={row.payeeBankAddress || ''}
          onChange={(e) => handleInputChange('payeeBankAddress', e.target.value)}
          placeholder="Bank address"
          rows="2"
          style={{ minHeight: '38px', resize: 'vertical' }}
        />
        {errors.payeeBankAddress && (
          <div className="invalid-feedback">{errors.payeeBankAddress}</div>
        )}
      </td>

      {/* Actions */}
      <td className="px-3 py-3">
        <button
          type="button"
          onClick={() => removeRow(rowIndex)}
          className="btn btn-outline-danger btn-sm d-flex align-items-center justify-content-center"
          style={{ width: '38px', height: '38px' }}
          title="Remove row"
        >
          <Trash2 size={16} />
        </button>
      </td>
    </tr>
  );
};

// Main PaymentDetailsTable Component
const PaymentDetailsTable = ({ rows=[], updateRow, addRow, removeRow, errors=[], currentPage, totalPages, onPageChange, canAddMore }) => {

  const [hover, setHover] = useState(false);
  const navigate = useNavigate();

  return (
    <div className="card shadow-sm">
      <div className="card-header border-bottom">
        <div className="d-flex justify-content-between align-items-center mb-3">
          <div className="d-flex align-items-center gap-3">
            <h3 className="h5 fw-semibold text-dark mb-0">Payment Details</h3>
            <span className="badge bg-light text-dark px-3 py-2 rounded-pill">
              Page {currentPage} of {totalPages}
            </span>
          </div>
          <div className="d-flex align-items-center">
            <DownloadTemplateButton/>
             <button
              onClick={() => navigate("/cash/create/batch")} // navigate to batch page
              className="btn btn-outline-success me-3"
            >
              Create a Batch
            </button>
            <button
              onClick={addRow}
              disabled={!canAddMore}
              className={`btn ${canAddMore ? 'btn-primary' : 'btn-secondary'} d-inline-flex align-items-center`}
               onMouseEnter={() => setHover(true)}
      onMouseLeave={() => setHover(false)}
      style={{
        backgroundColor: hover ? "#0D6EFD" : "white",
        borderColor: "#0D6EFD",
        color: hover ? "white" : "#0D6EFD",
        transition: "all 0.2s ease"
      }}
        >
              <Plus className="me-2" style={{ backgroundColor: "", height: '16px'}} />
              Add Payment
            </button>
          </div>
        </div>
      </div>

      <div className="table-responsive">
        <table className="table mb-0">
          <thead className="table-light">
            <tr>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '150px'}}>
                Account No
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '120px'}}>
                Reference No
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '150px'}}>
                Beneficiary
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '120px'}}>
                Amount
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '140px'}}>
                Payment Method
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '150px'}}>
                Payee Name
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '150px'}}>
                Payee Bank
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '120px'}}>
                Bank Branch
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '180px'}}>
                Bank Address
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom" style={{minWidth: '80px'}}>
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {rows.map((row, index) => (
              <PaymentRow
                key={index}
                row={row}
                rowIndex={index}
                updateRow={updateRow}
                removeRow={removeRow}
                errors={errors[index] || {}}
                isOdd={index % 2 === 1}
              />
            ))}
          </tbody>
        </table>
      </div>

      {totalPages > 1 && (
        <div className="card-footer border-top">
          <div className="d-flex justify-content-between align-items-center">
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className={`btn ${currentPage === 1 ? 'btn-outline-secondary disabled' : 'btn-outline-primary'}`}
            >
              Previous
            </button>
            
            <div className="d-flex gap-2">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                <button
                  key={page}
                  onClick={() => onPageChange(page)}
                  className={`btn ${page === currentPage ? 'btn-primary' : 'btn-outline-primary'}`}
                  style={{width: '40px', height: '40px'}}
                >
                  {page}
                </button>
              ))}
            </div>

            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className={`btn ${currentPage === totalPages ? 'btn-outline-secondary disabled' : 'btn-outline-primary'}`}
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PaymentDetailsTable;
