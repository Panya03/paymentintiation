import React, { useEffect, useState } from 'react';
import { Save, Send, FileText} from 'lucide-react';
import InstructionDetails from './InstructionDetails';
import PaymentDetailsTable from './PaymentDetailsTable';
import DraftManagement from './DraftManagement';
import { saveDraftToStorage } from '../utils/draftUtils';
import "bootstrap/dist/css/bootstrap.min.css";
import API from "../axiosInstance";


// page component
const PaymentForm = () => {
 
  const ROWS_PER_PAGE = 10;

  
  // instruction details
  const [instructionDetails, setInstructionDetails] = useState({
    paymentCurrency: '',
    debitAccount: '',
    valueDate: new Date().toISOString().split('T')[0]
  });

  //  payment rows
  const [rows, setRows] = useState([{
    paymentMethod: '',
    payeeDetails: '',
    payeeNature: '',
    bankDetails: '',
    yourReference: '',
    paymentReference: '',
    amount: '',
    notesToPayee: '',
    additionalNotes: ''
  }]);

  // Page state
  const [currentPage, setCurrentPage] = useState(1);

  // State for errors
  const [errors, setErrors] = useState({
    instruction: {},
    rows: []
  });

  const [showDrafts, setShowDrafts] = useState(false);

 
  //  helper to load a draft back 
  const handleEditDraft = (draft) => {
    if (!draft?.data) return;
    setShowDrafts(false);
    setInstructionDetails(draft.data.instructionDetails || instructionDetails);
    setRows(draft.data.rows?.length ? draft.data.rows : rows);
  };

  //page calculations
  const totalPages = Math.max(1, Math.ceil(rows.length / ROWS_PER_PAGE));
  const startIndex = (currentPage - 1) * ROWS_PER_PAGE;
  const endIndex = startIndex + ROWS_PER_PAGE;
  const currentRows = rows.slice(startIndex, endIndex);
  const canAddMore = rows.length < 100; 

  // Update instruction details
  const updateInstructionDetails = (field, value) => {
    setInstructionDetails(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when user updates field
    if (errors.instruction[field]) {
      setErrors(prev => ({
        ...prev,
        instruction: {
          ...prev.instruction,
          [field]: ''
        }
      }));
    }
  };

  // Update a  row
  const updateRow = (displayIndex, field, value) => {
    const actualIndex = startIndex + displayIndex;
    const newRows = [...rows];
    newRows[actualIndex] = {
      ...newRows[actualIndex],
      [field]: value
    };
    setRows(newRows);
    
    // Clear error once field updates
    if (errors.rows[actualIndex] && errors.rows[actualIndex][field]) {
      const newErrors = [...errors.rows];
      newErrors[actualIndex] = {
        ...newErrors[actualIndex],
        [field]: ''
      };
      setErrors(prev => ({
        ...prev,
        rows: newErrors
      }));
    }
  };

  // Add new row
  const addRow = () => {
    if (canAddMore) {
      const newRow = {
        paymentMethod: '',
        payeeDetails: '',
        payeeNature: '',
        bankDetails: '',
        yourReference: '',
        paymentReference: '',
        amount: '',
        notesToPayee: '',
        additionalNotes: ''
      };
      setRows([...rows, newRow]);
      
      // Navigate to the page with the new row
      const newTotalPages = Math.ceil((rows.length + 1) / ROWS_PER_PAGE);
      setCurrentPage(newTotalPages);
    }
  };

  // Remove row
  const removeRow = (displayIndex) => {
    if (rows.length > 1) {
      const actualIndex = startIndex + displayIndex;
      const newRows = rows.filter((_, index) => index !== actualIndex);
      setRows(newRows);
  
      const newErrorRows = errors.rows.filter((_, index) => index !== actualIndex);
      setErrors(prev => ({
        ...prev,
        rows: newErrorRows
      }));

      // Adjust current page if necessary
      const newTotalPages = Math.max(1, Math.ceil(newRows.length / ROWS_PER_PAGE));
      if (currentPage > newTotalPages) {
        setCurrentPage(newTotalPages);
      }
    }
  };

  // Handle page change
  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
  };

  // Validate form
  const validateForm = () => {
    const newErrors = {
      instruction: {},
      rows: []
    };

    // Validate instruction details
    if (!instructionDetails.paymentCurrency) {
      newErrors.instruction.paymentCurrency = 'Payment currency is required';
    }
    if (!instructionDetails.debitAccount) {
      newErrors.instruction.debitAccount = 'Debit account is required';
    }
    if (!instructionDetails.valueDate) {
      newErrors.instruction.valueDate = 'Value date is required';
    } else if (new Date(instructionDetails.valueDate) < new Date()) {
      newErrors.instruction.valueDate = 'Value date must be today or later';
    }

    // Validate rows
    rows.forEach((row, index) => {
      const rowErrors = {};
      
      if (!row.paymentMethod) rowErrors.paymentMethod = 'Required';
      if (!row.payeeDetails) rowErrors.payeeDetails = 'Required';
      if (!row.payeeNature) rowErrors.payeeNature = 'Required';
      if (!row.bankDetails) rowErrors.bankDetails = 'Required';
      if (!row.yourReference) rowErrors.yourReference = 'Required';
      if (!row.paymentReference) rowErrors.paymentReference = 'Required';
      if (!row.amount) {
        rowErrors.amount = 'Required';
      } else if (parseFloat(row.amount) <= 0) {
        rowErrors.amount = 'Amount must be positive';
      }

      newErrors.rows[index] = rowErrors;
    });

    setErrors(newErrors);
    return Object.keys(newErrors.instruction).length === 0 && 
           newErrors.rows.every(rowError => Object.keys(rowError).length === 0);
  };

  // Save draft
const handleDraft = () => {
     if (!validateForm()) {
    // If validation fails, do not save draft
    return;
  }
 
  const draft = {
    id: Date.now().toString(),
    name: instructionDetails.paymentReference || "Untitled Draft",
    debitAccount: instructionDetails.debitAccount,
    status: "draft",
    currency: instructionDetails.paymentCurrency,
    totalAmount: rows.reduce((sum, row) => sum + Number(row.amount || 0), 0),
    paymentCount: rows.length,
    createdDate: new Date().toLocaleDateString(),
    lastModified: new Date().toLocaleDateString(),
    data: {
      instructionDetails,
      rows,
    },
  };
  saveDraftToStorage(draft);
  setShowDrafts(true); // Show the drafts screen
};
  // Submit transaction
  const submitTransaction = async() => {
    if (validateForm()) try {
      // build payload to match your Transactions entity
      const transactionPayload = {
        currency: instructionDetails.paymentCurrency,
        debitAccount: instructionDetails.debitAccount,
        valueDate: instructionDetails.valueDate,
        
        accountNo: instructionDetails.accountNo,
        companyName: instructionDetails.companyName,

        paymentMethod: rows[0].paymentMethod,
        payeeDetails: rows[0].payeeDetails,
        payeeNature: rows[0].payeeNature,
        bankDetails: rows[0].bankDetails,
        yourReference: rows[0].yourReference,
        paymentReference: rows[0].paymentReference,
        amount: rows[0].amount,
        notesToPayee: rows[0].notesToPayee,
        additionalNotes: rows[0].additionalNotes,
        status: "PENDING"
      };
  
      const response = await API.post("/api/transactions", transactionPayload);
  
      alert(`✅ Transaction submitted successfully! ID: ${response.data.transactionId}`);
  
      // reset form
      setInstructionDetails({
        paymentCurrency: "",
        debitAccount: "",
        valueDate: new Date().toISOString().split("T")[0],
      });
  
      setRows([{
        paymentMethod: "",
        payeeDetails: "",
        payeeNature: "",
        bankDetails: "",
        yourReference: "",
        paymentReference: "",
        amount: "",
        notesToPayee: "",
        additionalNotes: ""
      }]);
  
      setCurrentPage(1);
      setErrors({ instruction: {}, rows: [] });
  
    } catch (error) {
      console.error("Transaction submission failed:", error);
      alert(`❌ Failed to submit transaction: ${error.response?.data?.message || error.message}`);
    }
  };

  // Calculate current row errors for display
  const currentRowErrors = currentRows.map((_, displayIndex) => {
    const actualIndex = startIndex + displayIndex;
    return errors.rows[actualIndex] || {};
  });

 return (
  <div className="min-vh-100 bg-light">
  
    {!showDrafts}

    {showDrafts ? (
  
      <DraftManagement
        onEditDraft={handleEditDraft}
        onBackToCreate={() => setShowDrafts(false)}
      />
    ) : (
      
     
      <div className="container-fluid px-4">
        <div className="mb-4 mt-3">
          <div className="d-flex justify-content-between align-items-center">
            <h1 className="h2 fw-bold text-dark mb-0">
              Create Payment Instructions
            </h1>
            <button
              onClick={() => setShowDrafts(true)}
              className="btn btn-outline-primary d-flex align-items-center"
            >
              <FileText className="me-2" size={18} />
              View Drafts
            </button>
          </div>
          <p className="text-muted mt-2 mb-0">
            Set up your payment instructions with detailed beneficiary information
          </p>
        </div>

        <div className="mb-4">
          <InstructionDetails
            instructionDetails={instructionDetails}
            updateInstructionDetails={updateInstructionDetails}
            errors={errors.instruction}
          />
        </div>

        <div className="mb-4">
          <PaymentDetailsTable
            rows={currentRows}
            updateRow={updateRow}
            addRow={addRow}
            removeRow={removeRow}
            errors={currentRowErrors}
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={handlePageChange}
            canAddMore={canAddMore}
          />
        </div>

        <div className="d-flex justify-content-end gap-3 mt-4">
          <button
            onClick={handleDraft}
            className="btn btn-secondary d-inline-flex align-items-center px-4 py-2"
          >
            <Save className="me-2" style={{ width: '20px', height: '20px' }} />
            Save Draft
          </button>
          <button
            onClick={submitTransaction}
            className="btn btn-success d-inline-flex align-items-center px-4 py-2"
          >
            <Send className="me-2" style={{ width: '20px', height: '20px' }} />
            Submit Transaction
          </button>
        </div>
      </div>
     
    )}
  </div>
);
};
export default PaymentForm;


import React from 'react';
import ValidationMessage from './ValidationMessage';

// Instruction Details Component
const InstructionDetails = ({ instructionDetails, updateInstructionDetails, errors }) => {
  const currencies = ['', 'USD', 'EUR', 'GBP', 'SGD', 'HKD', 'JPY'];
  const debitAccounts = ['', '1234567890 - USD Operating Account', '0987654321 - EUR Business Account', '1122334455 - GBP Current Account'];

  return (
    <div className="card shadow-sm mb-4">
      <div className="card-body">
        <h3 className="h5 fw-semibold text-dark mb-4">Instruction Details</h3>
        <div className="row g-3">
          <div className="col-md-4">
            <label className="form-label fw-medium text-dark mb-1">
              Payment Currency *
            </label>
            <select
              className={`form-select ${errors.paymentCurrency ? 'is-invalid' : ''}`}
              value={instructionDetails.paymentCurrency}
              onChange={(e) => updateInstructionDetails('paymentCurrency', e.target.value)}
            >
              {currencies.map((currency, index) => (
                <option key={index} value={currency}>
                  {currency || 'Select Currency'}
                </option>
              ))}
            </select>
            <ValidationMessage message={errors.paymentCurrency} />
          </div>

          <div className="col-md-4">
            <label className="form-label fw-medium text-dark mb-1">
              Debit Account *
            </label>
            <select
              className={`form-select ${errors.debitAccount ? 'is-invalid' : ''}`}
              value={instructionDetails.debitAccount}
              onChange={(e) => updateInstructionDetails('debitAccount', e.target.value)}
            >
              {debitAccounts.map((account, index) => (
                <option key={index} value={account}>
                  {account || 'Choose a debit account'}
                </option>
              ))}
            </select>
            <ValidationMessage message={errors.debitAccount} />
          </div>

          <div className="col-md-4">
            <label className="form-label fw-medium text-dark mb-1">
              Value Date *
            </label>
            <input
              type="date"
              className={`form-control ${errors.valueDate ? 'is-invalid' : ''}`}
              value={instructionDetails.valueDate}
              onChange={(e) => updateInstructionDetails('valueDate', e.target.value)}
              min={new Date().toISOString().split('T')[0]}
            />
            <ValidationMessage message={errors.valueDate} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default InstructionDetails;

import React from 'react';
import { Plus } from 'lucide-react';
import PaymentRow from './PaymentRow';
import UploadButton from './UploadButton';
import DownloadTemplateButton from './DownloadTemplateButton';
import { useState } from 'react';
// Payment Details Table Component
const PaymentDetailsTable = ({ rows, updateRow, addRow, removeRow, errors, currentPage, totalPages, onPageChange, canAddMore }) => {
  const [hover, setHover] = useState(false);

  return (
    <div className="card shadow-sm">
      <div className="card-header border-bottom">
        <div className="d-flex justify-content-between align-items-center mb-3">
          <div className="d-flex align-items-center gap-3">
            <h3 className="h5 fw-semibold text-dark mb-0">Payment Details</h3>
            <span className="badge bg-light text-dark px-3 py-2 rounded-pill">
              Page {currentPage} of {totalPages}
            </span>
          </div>
          <div className="d-flex align-items-center">
            <DownloadTemplateButton/>
            <UploadButton />
            <button
              onClick={addRow}
              disabled={!canAddMore}
              className={`btn ${canAddMore ? 'btn-primary' : 'btn-secondary'} d-inline-flex align-items-center`}
               onMouseEnter={() => setHover(true)}
      onMouseLeave={() => setHover(false)}
      style={{
        backgroundColor: hover ? "#0D6EFD" : "white",
        borderColor: "#0D6EFD",
        color: hover ? "white" : "#0D6EFD",
        transition: "all 0.2s ease"
      }}
        >
              <Plus className="me-2" style={{ backgroundColor: "", height: '16px'}} />
              Add Payment
            </button>
          </div>
        </div>
      </div>

      <div className="table-responsive">
        <table className="table mb-0">
          <thead className="table-light">
            <tr>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Payment Method
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Payee Details
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Payee Nature
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Bank Details
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Your Reference
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Payment Reference
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Amount
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Notes to Payee
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Additional Notes
              </th>
              <th className="px-3 py-3 text-start small text-uppercase fw-medium text-muted border-bottom">
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {rows.map((row, index) => (
              <PaymentRow
                key={index}
                row={row}
                rowIndex={index}
                updateRow={updateRow}
                removeRow={removeRow}
                errors={errors}
                isOdd={index % 2 === 1}
              />
            ))}
          </tbody>
        </table>
      </div>

      {totalPages > 1 && (
        <div className="card-footer border-top">
          <div className="d-flex justify-content-between align-items-center">
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className={`btn ${currentPage === 1 ? 'btn-outline-secondary disabled' : 'btn-outline-primary'}`}
            >
              Previous
            </button>
            
            <div className="d-flex gap-2">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                <button
                  key={page}
                  onClick={() => onPageChange(page)}
                  className={`btn ${page === currentPage ? 'btn-primary' : 'btn-outline-primary'}`}
                  style={{width: '40px', height: '40px'}}
                >
                  {page}
                </button>
              ))}
            </div>

            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className={`btn ${currentPage === totalPages ? 'btn-outline-secondary disabled' : 'btn-outline-primary'}`}
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PaymentDetailsTable;
